
uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000208  0000029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000208  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000104  00800114  00800114  000002b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000084f  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f7  00000000  00000000  00000bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000035d  00000000  00000000  000012ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  0000160c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a1  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a9  00000000  00000000  00001a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001c16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e0       	ldi	r30, 0x08	; 8
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 31       	cpi	r26, 0x18	; 24
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <main>
  9e:	0c 94 02 01 	jmp	0x204	; 0x204 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_20>:
void appendSerial(char c);
void serialWrite(char c[]);
char getChar(void);

ISR(USART_TX_vect) //trigger when transmitting
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	ef 93       	push	r30
  b4:	ff 93       	push	r31
	//read char in UDR0
	if(tx_readPos != tx_writePos)
  b6:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <tx_readPos>
  ba:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
  be:	e8 17       	cp	r30, r24
  c0:	79 f0       	breq	.+30     	; 0xe0 <__vector_20+0x3a>
	{
		UDR0 = txBuffer[tx_readPos];
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	e8 56       	subi	r30, 0x68	; 104
  c6:	fe 4f       	sbci	r31, 0xFE	; 254
  c8:	80 81       	ld	r24, Z
  ca:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		tx_readPos++;
  ce:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <tx_readPos>
  d2:	8f 5f       	subi	r24, 0xFF	; 255
		 
		if(tx_readPos >= BUFFER_SIZE)
  d4:	1a f0       	brmi	.+6      	; 0xdc <__vector_20+0x36>
{
	//read char in UDR0
	if(tx_readPos != tx_writePos)
	{
		UDR0 = txBuffer[tx_readPos];
		tx_readPos++;
  d6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <tx_readPos>
  da:	02 c0       	rjmp	.+4      	; 0xe0 <__vector_20+0x3a>
		 
		if(tx_readPos >= BUFFER_SIZE)
		{
			tx_readPos = 0;
  dc:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_readPos>
		}
	}
}
  e0:	ff 91       	pop	r31
  e2:	ef 91       	pop	r30
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <__vector_18>:

ISR(USART_RX_vect) //trigger when receiving something
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
  fe:	ef 93       	push	r30
 100:	ff 93       	push	r31
	rxBuffer[rx_writePos] = UDR0;
 102:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <rx_writePos>
 106:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 10a:	e8 2f       	mov	r30, r24
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	e8 5e       	subi	r30, 0xE8	; 232
 110:	fe 4f       	sbci	r31, 0xFE	; 254
 112:	90 83       	st	Z, r25
	rx_writePos++;
 114:	8f 5f       	subi	r24, 0xFF	; 255
	
	if(rx_writePos >= BUFFER_SIZE)
 116:	1a f0       	brmi	.+6      	; 0x11e <__vector_18+0x2e>
}

ISR(USART_RX_vect) //trigger when receiving something
{
	rxBuffer[rx_writePos] = UDR0;
	rx_writePos++;
 118:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <rx_writePos>
 11c:	02 c0       	rjmp	.+4      	; 0x122 <__vector_18+0x32>
	
	if(rx_writePos >= BUFFER_SIZE)
	{
		rx_writePos = 0;	
 11e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <rx_writePos>
	}
}
 122:	ff 91       	pop	r31
 124:	ef 91       	pop	r30
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <appendSerial>:
}

//append char c to the serialBuffer array
void appendSerial(char c)
{
	txBuffer[tx_writePos] = c;
 134:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <__data_end>
 138:	e9 2f       	mov	r30, r25
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	e8 56       	subi	r30, 0x68	; 104
 13e:	fe 4f       	sbci	r31, 0xFE	; 254
 140:	80 83       	st	Z, r24
	tx_writePos++;
 142:	9f 5f       	subi	r25, 0xFF	; 255
	 
	if(tx_writePos >= BUFFER_SIZE)
 144:	1a f0       	brmi	.+6      	; 0x14c <appendSerial+0x18>

//append char c to the serialBuffer array
void appendSerial(char c)
{
	txBuffer[tx_writePos] = c;
	tx_writePos++;
 146:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <__data_end>
 14a:	08 95       	ret
	 
	if(tx_writePos >= BUFFER_SIZE)
	{
		tx_writePos = 0;
 14c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
 150:	08 95       	ret

00000152 <serialWrite>:
	}
}

//create the transmit buffer and then trigger INTR
void serialWrite(char c[])
{
 152:	1f 93       	push	r17
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(c); i++)
 15a:	10 e0       	ldi	r17, 0x00	; 0
 15c:	07 c0       	rjmp	.+14     	; 0x16c <serialWrite+0x1a>
	{
		appendSerial(c[i]);
 15e:	fe 01       	movw	r30, r28
 160:	e2 0f       	add	r30, r18
 162:	f3 1f       	adc	r31, r19
 164:	80 81       	ld	r24, Z
 166:	0e 94 9a 00 	call	0x134	; 0x134 <appendSerial>
}

//create the transmit buffer and then trigger INTR
void serialWrite(char c[])
{
	for(uint8_t i = 0; i < strlen(c); i++)
 16a:	1f 5f       	subi	r17, 0xFF	; 255
 16c:	21 2f       	mov	r18, r17
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	fe 01       	movw	r30, r28
 172:	01 90       	ld	r0, Z+
 174:	00 20       	and	r0, r0
 176:	e9 f7       	brne	.-6      	; 0x172 <serialWrite+0x20>
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	ec 1b       	sub	r30, r28
 17c:	fd 0b       	sbc	r31, r29
 17e:	2e 17       	cp	r18, r30
 180:	3f 07       	cpc	r19, r31
 182:	68 f3       	brcs	.-38     	; 0x15e <serialWrite+0xc>
	{
		appendSerial(c[i]);
	}
	 
	if(UCSR0A & (1 << UDRE0)) //when ready to transmit
 184:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 188:	85 fd       	sbrc	r24, 5
	{
		UDR0 = 0;
 18a:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	}
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	08 95       	ret

00000196 <getChar>:

//get first char in the receiving buffer
char getChar(void)
{
	char ret = '\0';
	if(rx_readPos != rx_writePos)
 196:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <rx_readPos>
 19a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <rx_writePos>
 19e:	98 17       	cp	r25, r24
 1a0:	69 f0       	breq	.+26     	; 0x1bc <getChar+0x26>
	{
		ret = rxBuffer[rx_readPos];
 1a2:	e9 2f       	mov	r30, r25
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	e8 5e       	subi	r30, 0xE8	; 232
 1a8:	fe 4f       	sbci	r31, 0xFE	; 254
 1aa:	80 81       	ld	r24, Z
		rx_readPos++;
 1ac:	9f 5f       	subi	r25, 0xFF	; 255
		
		if(rx_readPos >= BUFFER_SIZE)
 1ae:	1a f0       	brmi	.+6      	; 0x1b6 <getChar+0x20>
{
	char ret = '\0';
	if(rx_readPos != rx_writePos)
	{
		ret = rxBuffer[rx_readPos];
		rx_readPos++;
 1b0:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <rx_readPos>
 1b4:	08 95       	ret
		
		if(rx_readPos >= BUFFER_SIZE)
		{
			rx_readPos = 0;
 1b6:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <rx_readPos>
 1ba:	08 95       	ret
}

//get first char in the receiving buffer
char getChar(void)
{
	char ret = '\0';
 1bc:	80 e0       	ldi	r24, 0x00	; 0
		{
			rx_readPos = 0;
		}
	}
	return ret;
 1be:	08 95       	ret

000001c0 <main>:
}

int main(void)
{
	//setup baudrate
	UBRR0H = (BRC >> 8);
 1c0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L =  BRC;
 1c4:	87 e6       	ldi	r24, 0x67	; 103
 1c6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	//enable TX/RX and interrupts
	UCSR0B = (1 << TXEN0)  | (1 << TXCIE0) | (1 << RXEN0)  | (1 << RXCIE0);
 1ca:	88 ed       	ldi	r24, 0xD8	; 216
 1cc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	//using 8 bit data transmission
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 1d0:	86 e0       	ldi	r24, 0x06	; 6
 1d2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	//set PB5 as output
	DDRB = (1 << PORTB5);
 1d6:	80 e2       	ldi	r24, 0x20	; 32
 1d8:	84 b9       	out	0x04, r24	; 4
	
	//enable external interrupts
	sei();
 1da:	78 94       	sei
			PORTB = (1 << PORTB5); //set HIGH
			serialWrite("LED On\n\r");
		}
		else if(c == '0')
		{
			PORTB = ~(1 << PORTB5); //set LOW
 1dc:	df ed       	ldi	r29, 0xDF	; 223
		//get char from serial RX
		char c = getChar();
		
		if(c == '1')
		{
			PORTB = (1 << PORTB5); //set HIGH
 1de:	c0 e2       	ldi	r28, 0x20	; 32
	sei();

	while(1)
	{
		//get char from serial RX
		char c = getChar();
 1e0:	0e 94 cb 00 	call	0x196	; 0x196 <getChar>
		
		if(c == '1')
 1e4:	81 33       	cpi	r24, 0x31	; 49
 1e6:	31 f4       	brne	.+12     	; 0x1f4 <main+0x34>
		{
			PORTB = (1 << PORTB5); //set HIGH
 1e8:	c5 b9       	out	0x05, r28	; 5
			serialWrite("LED On\n\r");
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	0e 94 a9 00 	call	0x152	; 0x152 <serialWrite>
 1f2:	f6 cf       	rjmp	.-20     	; 0x1e0 <main+0x20>
		}
		else if(c == '0')
 1f4:	80 33       	cpi	r24, 0x30	; 48
 1f6:	a1 f7       	brne	.-24     	; 0x1e0 <main+0x20>
		{
			PORTB = ~(1 << PORTB5); //set LOW
 1f8:	d5 b9       	out	0x05, r29	; 5
			serialWrite("LED Off\n\r");
 1fa:	89 e0       	ldi	r24, 0x09	; 9
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	0e 94 a9 00 	call	0x152	; 0x152 <serialWrite>
 202:	ee cf       	rjmp	.-36     	; 0x1e0 <main+0x20>

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
