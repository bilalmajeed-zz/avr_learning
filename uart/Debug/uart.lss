
uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000020e  000002a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000104  00800114  00800114  000002b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000918  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d1  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000413  00000000  00000000  00001479  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  0000188c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c4  00000000  00000000  00001970  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a9  00000000  00000000  00001d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001edd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e0       	ldi	r30, 0x0E	; 14
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 31       	cpi	r26, 0x18	; 24
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 05 01 	jmp	0x20a	; 0x20a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <util/delay.h>
#include "uart_lib/uart.h"

int main(void)
{   
	uartInit();
  a6:	0e 94 6c 00 	call	0xd8	; 0xd8 <uartInit>
	
	DDRB = (1 << PORTB5);
  aa:	80 e2       	ldi	r24, 0x20	; 32
  ac:	84 b9       	out	0x04, r24	; 4
	
	sei();
  ae:	78 94       	sei
			PORTB = (1 << PORTB5);
			serialWrite("LED On\n\r");
		}
		else if(c == '0')
		{
			PORTB = ~(1 << PORTB5);
  b0:	df ed       	ldi	r29, 0xDF	; 223
	{
		char c = getChar();
		
		if(c == '1')
		{
			PORTB = (1 << PORTB5);
  b2:	c0 e2       	ldi	r28, 0x20	; 32
	
	sei();
		 
	while(1)
	{
		char c = getChar();
  b4:	0e 94 a9 00 	call	0x152	; 0x152 <getChar>
		
		if(c == '1')
  b8:	81 33       	cpi	r24, 0x31	; 49
  ba:	31 f4       	brne	.+12     	; 0xc8 <main+0x22>
		{
			PORTB = (1 << PORTB5);
  bc:	c5 b9       	out	0x05, r28	; 5
			serialWrite("LED On\n\r");
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	0e 94 87 00 	call	0x10e	; 0x10e <serialWrite>
  c6:	f6 cf       	rjmp	.-20     	; 0xb4 <main+0xe>
		}
		else if(c == '0')
  c8:	80 33       	cpi	r24, 0x30	; 48
  ca:	a1 f7       	brne	.-24     	; 0xb4 <main+0xe>
		{
			PORTB = ~(1 << PORTB5);
  cc:	d5 b9       	out	0x05, r29	; 5
			serialWrite("LED Off\n\r");
  ce:	89 e0       	ldi	r24, 0x09	; 9
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 87 00 	call	0x10e	; 0x10e <serialWrite>
  d6:	ee cf       	rjmp	.-36     	; 0xb4 <main+0xe>

000000d8 <uartInit>:
uint8_t rx_readPos = 0;
uint8_t rx_writePos = 0;

void uartInit()
{
	UBRR0H = (BRC >> 8);
  d8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L =  BRC;
  dc:	87 e6       	ldi	r24, 0x67	; 103
  de:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	UCSR0B = (1 << TXEN0)  | (1 << TXCIE0) | (1 << RXEN0)  | (1 << RXCIE0);
  e2:	88 ed       	ldi	r24, 0xD8	; 216
  e4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  ee:	08 95       	ret

000000f0 <appendSerial>:
}

void appendSerial(char c)
{
	tx_serialBuffer[tx_writePos] = c;
  f0:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <tx_writePos>
  f4:	e9 2f       	mov	r30, r25
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	e8 56       	subi	r30, 0x68	; 104
  fa:	fe 4f       	sbci	r31, 0xFE	; 254
  fc:	80 83       	st	Z, r24
	tx_writePos++;
  fe:	9f 5f       	subi	r25, 0xFF	; 255
	 
	if(tx_writePos >= BUFFER_SIZE)
 100:	1a f0       	brmi	.+6      	; 0x108 <appendSerial+0x18>
}

void appendSerial(char c)
{
	tx_serialBuffer[tx_writePos] = c;
	tx_writePos++;
 102:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <tx_writePos>
 106:	08 95       	ret
	 
	if(tx_writePos >= BUFFER_SIZE)
	{
		tx_writePos = 0;
 108:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <tx_writePos>
 10c:	08 95       	ret

0000010e <serialWrite>:
	}
}
 
void serialWrite(char c[])
{
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(c); i++)
 116:	10 e0       	ldi	r17, 0x00	; 0
 118:	07 c0       	rjmp	.+14     	; 0x128 <serialWrite+0x1a>
	{
		appendSerial(c[i]);
 11a:	fe 01       	movw	r30, r28
 11c:	e2 0f       	add	r30, r18
 11e:	f3 1f       	adc	r31, r19
 120:	80 81       	ld	r24, Z
 122:	0e 94 78 00 	call	0xf0	; 0xf0 <appendSerial>
	}
}
 
void serialWrite(char c[])
{
	for(uint8_t i = 0; i < strlen(c); i++)
 126:	1f 5f       	subi	r17, 0xFF	; 255
 128:	21 2f       	mov	r18, r17
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	fe 01       	movw	r30, r28
 12e:	01 90       	ld	r0, Z+
 130:	00 20       	and	r0, r0
 132:	e9 f7       	brne	.-6      	; 0x12e <serialWrite+0x20>
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	ec 1b       	sub	r30, r28
 138:	fd 0b       	sbc	r31, r29
 13a:	2e 17       	cp	r18, r30
 13c:	3f 07       	cpc	r19, r31
 13e:	68 f3       	brcs	.-38     	; 0x11a <serialWrite+0xc>
	{
		appendSerial(c[i]);
	}
	 
	if(UCSR0A & (1 << UDRE0))
 140:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 144:	85 fd       	sbrc	r24, 5
	{
		UDR0 = 0;
 146:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	}
}
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	1f 91       	pop	r17
 150:	08 95       	ret

00000152 <getChar>:
 
char getChar(void)
{
	char ret = '\0';
	if(rx_readPos != rx_writePos)
 152:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <rx_readPos>
 156:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 15a:	98 17       	cp	r25, r24
 15c:	69 f0       	breq	.+26     	; 0x178 <getChar+0x26>
	{
		ret = rx_serialBuffer[rx_readPos];
 15e:	e9 2f       	mov	r30, r25
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	e8 5e       	subi	r30, 0xE8	; 232
 164:	fe 4f       	sbci	r31, 0xFE	; 254
 166:	80 81       	ld	r24, Z
		rx_readPos++;
 168:	9f 5f       	subi	r25, 0xFF	; 255
		
		if(rx_readPos >= BUFFER_SIZE)
 16a:	1a f0       	brmi	.+6      	; 0x172 <getChar+0x20>
{
	char ret = '\0';
	if(rx_readPos != rx_writePos)
	{
		ret = rx_serialBuffer[rx_readPos];
		rx_readPos++;
 16c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <rx_readPos>
 170:	08 95       	ret
		
		if(rx_readPos >= BUFFER_SIZE)
		{
			rx_readPos = 0;
 172:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <rx_readPos>
 176:	08 95       	ret
	}
}
 
char getChar(void)
{
	char ret = '\0';
 178:	80 e0       	ldi	r24, 0x00	; 0
			rx_readPos = 0;
		}
	}
	
	return ret;
}
 17a:	08 95       	ret

0000017c <__vector_20>:

ISR(USART_TX_vect)
{
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	8f 93       	push	r24
 188:	ef 93       	push	r30
 18a:	ff 93       	push	r31
	if(tx_readPos != tx_writePos)
 18c:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <tx_readPos>
 190:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <tx_writePos>
 194:	e8 17       	cp	r30, r24
 196:	79 f0       	breq	.+30     	; 0x1b6 <__vector_20+0x3a>
	{
		UDR0 = tx_serialBuffer[tx_readPos];
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	e8 56       	subi	r30, 0x68	; 104
 19c:	fe 4f       	sbci	r31, 0xFE	; 254
 19e:	80 81       	ld	r24, Z
 1a0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		tx_readPos++;
 1a4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <tx_readPos>
 1a8:	8f 5f       	subi	r24, 0xFF	; 255
		 
		if(tx_readPos >= BUFFER_SIZE)
 1aa:	1a f0       	brmi	.+6      	; 0x1b2 <__vector_20+0x36>
ISR(USART_TX_vect)
{
	if(tx_readPos != tx_writePos)
	{
		UDR0 = tx_serialBuffer[tx_readPos];
		tx_readPos++;
 1ac:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <tx_readPos>
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <__vector_20+0x3a>
		 
		if(tx_readPos >= BUFFER_SIZE)
		{
			tx_readPos = 0;
 1b2:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <tx_readPos>
		}
	}
}
 1b6:	ff 91       	pop	r31
 1b8:	ef 91       	pop	r30
 1ba:	8f 91       	pop	r24
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <__vector_18>:

ISR(USART_RX_vect)
{
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	8f 93       	push	r24
 1d2:	9f 93       	push	r25
 1d4:	ef 93       	push	r30
 1d6:	ff 93       	push	r31
	rx_serialBuffer[rx_writePos] = UDR0;
 1d8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 1dc:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1e0:	e8 2f       	mov	r30, r24
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	e8 5e       	subi	r30, 0xE8	; 232
 1e6:	fe 4f       	sbci	r31, 0xFE	; 254
 1e8:	90 83       	st	Z, r25
	rx_writePos++;
 1ea:	8f 5f       	subi	r24, 0xFF	; 255
	
	if(rx_writePos >= BUFFER_SIZE)
 1ec:	1a f0       	brmi	.+6      	; 0x1f4 <__vector_18+0x2e>
}

ISR(USART_RX_vect)
{
	rx_serialBuffer[rx_writePos] = UDR0;
	rx_writePos++;
 1ee:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__vector_18+0x32>
	
	if(rx_writePos >= BUFFER_SIZE)
	{
		rx_writePos = 0;	
 1f4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
	}
 1f8:	ff 91       	pop	r31
 1fa:	ef 91       	pop	r30
 1fc:	9f 91       	pop	r25
 1fe:	8f 91       	pop	r24
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <_exit>:
 20a:	f8 94       	cli

0000020c <__stop_program>:
 20c:	ff cf       	rjmp	.-2      	; 0x20c <__stop_program>
