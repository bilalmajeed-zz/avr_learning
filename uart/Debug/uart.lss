
uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000180  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000082  00800100  00800100  000001f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000811  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e2  00000000  00000000  00000ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037b  00000000  00000000  000011a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001524  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000388  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c1  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001b3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_20>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 38       	cpi	r26, 0x82	; 130
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5d 00 	call	0xba	; 0xba <main>
  88:	0c 94 be 00 	jmp	0x17c	; 0x17c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <getChar>:
	{
		ret = serialBuffer[readPos];
	}
	
	return ret;
}
  90:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <readPos>
  94:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  98:	98 17       	cp	r25, r24
  9a:	69 f0       	breq	.+26     	; 0xb6 <getChar+0x26>
  9c:	e9 2f       	mov	r30, r25
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	ee 5f       	subi	r30, 0xFE	; 254
  a2:	fe 4f       	sbci	r31, 0xFE	; 254
  a4:	80 81       	ld	r24, Z
  a6:	9f 5f       	subi	r25, 0xFF	; 255
  a8:	1a f0       	brmi	.+6      	; 0xb0 <getChar+0x20>
  aa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <readPos>
  ae:	08 95       	ret
  b0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <readPos>
  b4:	08 95       	ret
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	08 95       	ret

000000ba <main>:
  ba:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  be:	87 e6       	ldi	r24, 0x67	; 103
  c0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  c4:	88 ed       	ldi	r24, 0xD8	; 216
  c6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  ca:	86 e0       	ldi	r24, 0x06	; 6
  cc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  d0:	80 e2       	ldi	r24, 0x20	; 32
  d2:	84 b9       	out	0x04, r24	; 4
  d4:	78 94       	sei
  d6:	df ed       	ldi	r29, 0xDF	; 223
  d8:	c0 e2       	ldi	r28, 0x20	; 32
  da:	0e 94 48 00 	call	0x90	; 0x90 <getChar>
  de:	81 33       	cpi	r24, 0x31	; 49
  e0:	11 f4       	brne	.+4      	; 0xe6 <main+0x2c>
  e2:	c5 b9       	out	0x05, r28	; 5
  e4:	fa cf       	rjmp	.-12     	; 0xda <main+0x20>
  e6:	80 33       	cpi	r24, 0x30	; 48
  e8:	c1 f7       	brne	.-16     	; 0xda <main+0x20>
  ea:	d5 b9       	out	0x05, r29	; 5
  ec:	f6 cf       	rjmp	.-20     	; 0xda <main+0x20>

000000ee <__vector_20>:

ISR(USART_TX_vect)
{
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	8f 93       	push	r24
  fa:	ef 93       	push	r30
  fc:	ff 93       	push	r31
	if(readPos != writePos)
  fe:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <readPos>
 102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 106:	e8 17       	cp	r30, r24
 108:	79 f0       	breq	.+30     	; 0x128 <__vector_20+0x3a>
	{
		UDR0 = serialBuffer[readPos];
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	ee 5f       	subi	r30, 0xFE	; 254
 10e:	fe 4f       	sbci	r31, 0xFE	; 254
 110:	80 81       	ld	r24, Z
 112:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		readPos++;
 116:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <readPos>
 11a:	8f 5f       	subi	r24, 0xFF	; 255
		 
		if(readPos >= BUFFER_SIZE)
 11c:	1a f0       	brmi	.+6      	; 0x124 <__vector_20+0x36>
ISR(USART_TX_vect)
{
	if(readPos != writePos)
	{
		UDR0 = serialBuffer[readPos];
		readPos++;
 11e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <readPos>
 122:	02 c0       	rjmp	.+4      	; 0x128 <__vector_20+0x3a>
		 
		if(readPos >= BUFFER_SIZE)
		{
			readPos = 0;
 124:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <readPos>
		}
	}
}
 128:	ff 91       	pop	r31
 12a:	ef 91       	pop	r30
 12c:	8f 91       	pop	r24
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <__vector_18>:

ISR(USART_RX_vect)
{
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	8f 93       	push	r24
 144:	9f 93       	push	r25
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
	serialBuffer[writePos] = UDR0;
 14a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 14e:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 152:	e8 2f       	mov	r30, r24
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	ee 5f       	subi	r30, 0xFE	; 254
 158:	fe 4f       	sbci	r31, 0xFE	; 254
 15a:	90 83       	st	Z, r25
	writePos++;
 15c:	8f 5f       	subi	r24, 0xFF	; 255
	
	if(writePos >= BUFFER_SIZE)
 15e:	1a f0       	brmi	.+6      	; 0x166 <__vector_18+0x2e>
}

ISR(USART_RX_vect)
{
	serialBuffer[writePos] = UDR0;
	writePos++;
 160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 164:	02 c0       	rjmp	.+4      	; 0x16a <__vector_18+0x32>
	
	if(writePos >= BUFFER_SIZE)
	{
		writePos = 0;	
 166:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
